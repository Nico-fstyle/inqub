Project Setup:
  ✔ create basic html page with minor css @done(23-11-01 10:15)
  ✔ running project on local web server @done(23-11-01 10:15)
  ✔ add phaser 3 library @done(23-11-01 10:15)
  ✔ create a basic phaser 3 game instance @done(23-11-01 10:15)
  ✔ add jsconfig to get phaser 3 types and intellisense @done(23-11-01 10:15)

Game Project Assets:
  ✔ download game assets and add to project @done(23-11-01 10:15)
  ✔ show links to where assets can be found @done(23-11-01 10:15)

Battle System:
  ✔ load game assets @done(23-11-01 10:15)
  ✔ create battle scene layout @done(23-11-01 10:15)
  ✔ create dialog menu @done(23-11-01 10:15)
  ✔ create option menu @done(23-11-01 10:15)
  ✔ create monster attack move list @done(23-11-01 10:16)
  ✔ handle player input @done(23-11-01 10:16)
  ✔ code optimization - move logic to components @done(23-11-03 08:05)
    ✔ create health component @done(23-11-02 10:28)
    ✔ create background component @done(23-11-02 10:28)
    ✔ create monster components @done(23-11-03 08:05)
  ✔ adding basic attack logic @done(23-11-05 13:28)
  ✔ taking damage and monster knock out @done(23-11-05 13:28)
  ✔ battle state machine @done(23-11-06 08:42)
    ✔ what is a finite state machine @done(23-11-06 07:48)
    ✔ review the battle states and what each one represents @done(23-11-06 07:48)
    ✔ implement each state @done(23-11-06 07:48)
    ✔ add item, flee, and monster states @done(23-11-06 07:48)
    ✔ player input improvements @done(23-11-06 08:42)
  ✔ battle scene polish @done(23-11-12 22:28)
    ✔ text animations @done(23-11-06 09:13)
    ✔ monster animations @done(23-11-10 02:18)
    ✔ skip animations @done(23-11-10 02:52)
    ✔ attack animations @done(23-11-12 21:40)
    ✔ scene transitions @done(23-11-12 22:21)
    ✔ custom fonts @done(23-11-10 21:19)

World Scene:
  ✔ load level background @done(23-11-21 12:04)
  ✔ create player @done(23-11-21 12:04)
  ✔ handle player input @done(23-11-21 12:04)
  ✔ camera movement @done(23-11-21 12:04)
  ✔ handle grid based movement @done(23-11-21 12:04)
  ☐ handle collisions
  ☐ add wild monster encounter logic
  ☐ store player position in data manager

Level Development With Tiled:
  ☐ Basic level design concepts
  ☐ Add collision layer
  ☐ Add custom types to Tiled
  ☐ Add game objects
  ☐ Add npcs
  ☐ Exporting level images and JSON

World Scene Part 2:
  ☐ add interactive game objects
  ☐ dialog ui component
  ☐ add npcs
  ☐ add npc dialog
  ☐ add npc movement

Title Screen:
  ☐ create basic title screen
  ☐ add options menu
  ☐ save & loading options
  ☐ connecting option data to battle scene

Tools Part 1:
  ☐ using tweakpane for testing
    ☐ positioning game objects
    ☐ monster attacks
    ☐ animations

Saving & Loading:
  ☐ add game menu with option to save game
  ☐ update menu scene with continue option to load game
  ☐ on new game, we should reset the player data (pos, monsters, etc)
  ☐ update data manager to persist monster data and current stats

Inventory:
  ☐ create class for items and inventory
  ☐ create ui screen for viewing items
  ☐ update menu to have view bag
  ☐ update battle scene to allow using items
  ☐ update data manager to allow saving of inventory items

Battle Scene Part 2:
  ☐ using items
  ☐ running away
  ☐ enemy random attack
  ☐ player faint
  ☐ attacking order
  ☐ dynamic monster data based on player party and encounter

World Scene Part 3:
  ☐ advanced wild monster encounter logic
  ☐ adding a game menu
    ☐ view inventory
    ☐ view monster party
    ☐ saving game data
  ☐ buildings
  ☐ items in the field

-------------------------------

Future Content:
  ☐ cutscenes
  ☐ in game events and tracking
  ☐ shops
  ☐ battle npcs
  ☐ monster encyclopedia
  ☐ monster league/gyms


-------------------------------
☐ ✔ ✘
-------------------------------
